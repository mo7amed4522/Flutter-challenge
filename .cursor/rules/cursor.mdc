{
  "rules": [
    {
      "name": "Theme First Principle",
      "description": "All UI components must use AppTheme values. No hardcoded colors, fonts, sizes, or styles.",
      "condition": {
        "language": "dart"
      },
      "prompt": "Always access visual properties from AppTheme. Never use raw Colors.*, TextStyle(fontSize: ...), or hardcoded icons. Define new theme properties in AppTheme before using them."
    },
    {
      "name": "Android Uses Material Design",
      "description": "When targeting Android, use Material widgets only.",
      "condition": {
        "platform": "android"
      },
      "prompt": "Use MaterialApp, Scaffold, AppBar, ElevatedButton, etc. Follow Material 3 guidelines. Use Roboto font by default."
    },
    {
      "name": "iOS Uses Cupertino Design",
      "description": "When targeting iOS, use Cupertino widgets only.",
      "condition": {
        "platform": "ios"
      },
      "prompt": "Use CupertinoApp, CupertinoPageScaffold, CupertinoNavigationBar, CupertinoButton, etc. Follow Apple HIG. Use SFProDisplay font by default."
    },
    {
      "name": "Tablet Layout with flutter_platform_widgets",
      "description": "For large screens, use adaptive widgets and unified layout.",
      "condition": {
        "screen": "tablet"
      },
      "prompt": "Use flutter_platform_widgets package to render platform-consistent widgets on large screens. Wrap layout with LayoutBuilder to detect screen size and load tablet-specific UI."
    },
    {
      "name": "Platform-Specific Fonts & Icons",
      "description": "Fonts and icons must match platform conventions.",
      "condition": {
        "category": "typography"
      },
      "prompt": "Roboto for Android, SFProDisplay for iOS. Icons: Icons.* for Android, CupertinoIcons.* for iOS. Do not mix icon sets unless abstracted via helper."
    },
    {
      "name": "RTL / LTR Directionality Support",
      "description": "Every screen must respect text direction.",
      "condition": {
        "category": "ui"
      },
      "prompt": "Wrap root widgets with Directionality or set textDirection globally. Ensure RTL layout mirrors LTR where needed (e.g., alignment, padding)."
    },
    {
      "name": "Navigation with go_router Only",
      "description": "Use go_router for routing and navigation. No legacy Navigator methods.",
      "condition": {
        "feature": "navigation"
      },
      "prompt": "Define routes using GoRouter. Navigate using context.pushNamed(). Do not use Navigator.push(), MaterialPageRoute, or onGenerateRoute."
    },
    {
      "name": "Directory Structure Enforcement",
      "description": "Follow strict folder organization for themes, platform-specific screens, and shared code.",
      "condition": {
        "feature": "structure"
      },
      "prompt": "Place themes in core/themes/. Keep Android, iOS, and tablet-specific screens in separate folders under features/. Always provide a base screen file that selects the correct implementation based on platform."
    },
    {
      "name": "Code Quality & Linting",
      "description": "Enforce Dart best practices and prevent violations of this contract.",
      "condition": {
        "tool": "analysis"
      },
      "prompt": "Enable linter rules to catch hardcoded colors, improper imports, and incorrect widget usage. Integrate custom_lint or very_good_analysis if needed."
    }
  ]
}